---

# trun off swap permanently
- name: disable swap - step one
  become: yes
  systemd: 
    name: swap.target
    state: stopped
    masked: yes
  changed_when: false

- name: disable swap - step two
  become: yes
  shell:
    cmd: swapoff -a
  changed_when: false


    
# Verify the MAC address and product_uuid are unique for every node




# open required ports  
- name: Install UFW
  dnf:
    name: ufw
    state: present

- name: Start UFW service
  systemd:
    name: ufw
    state: started
    enabled: yes
      
- name: open required ports
  shell: |
    sudo ufw allow 6443/tcp
    sudo ufw allow 32750/tcp
    sudo ufw allow 10250/tcp
    sudo ufw allow 4443/tcp
    sudo ufw allow 443/tcp
    sudo ufw allow 8080/tcp


# Installing a container runtime interface (CRI)
- name:  Forwarding IPv4 and letting iptables see bridged traffic 
  shell: |
    echo "overlay" | sudo tee -a /etc/modules-load.d/k8s.conf
    echo "br_netfilter" | sudo tee -a /etc/modules-load.d/k8s.conf
    sudo modprobe overlay
    sudo modprobe br_netfilter

- name: sysctl params required by setup, params persist across reboots
  shell: |
    echo "net.bridge.bridge-nf-call-iptables  = 1" | sudo tee -a /etc/sysctl.d/k8s.conf
    echo "net.bridge.bridge-nf-call-ip6tables = 1" | sudo tee -a /etc/sysctl.d/k8s.conf 
    echo "net.ipv4.ip_forward                 = 1" | sudo tee -a /etc/sysctl.d/k8s.conf 

- name: Apply sysctl params without reboot
  command: sudo sysctl --system


#- name:  Forwarding IPv4 and letting iptables see bridged traffic 
#  become: yes
#  command: "{{ item }}"
#  with_items:
#    - cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf\overlay\br_netfilter\EOF
#    - sudo modprobe overlay
#    - sudo modprobe br_netfilter

#- name: install cri-o prerequisits
#  dnf:
#    name: libseccomp, glibc-langpack-en
#    state: present
#  when: ansible_distribution == "Fedora"

#- name: adding cri-o repo to dnf
#  command: dnf config-manager --add-repo=https://cbs.centos.org/repos/paas7-crio-411-candidate/x86_64/os/
#  when: ansible_distribution == "Fedora"

#- name: install cri-o
#  dnf:
#    name: cri-o
#   state: present
#  when: ansible_distribution == "Fedora"


    
# Installing kubeadm, kubelet and kubectl
- name: disable SELinux
  command: sudo setenforce 0
  when: ansible_distribution == "Fedora"

- name: disable SELinux- step two
  command: sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
  when: ansible_distribution == "Fedora"

- name: add gpg key for kubernetes repo
  command: sudo rpm --import https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
  when: ansible_distribution == "Fedora"

- name: adding kubernetes repo
  command: dnf config-manager --add-repo https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
  when: ansible_distribution == "Fedora"

- name: update packages in fedora
  tags: always
  dnf:
    update_cache: yes
  when: ansible_distribution == "Fedora"

- name: install kubectl
  dnf:
    name: kubectl
  when: ansible_distribution == "Fedora"

- name: install kubelet
  dnf:
    name: kubelet
  when: ansible_distribution == "Fedora"

- name: install kubeadm
  dnf:
    name: kubeadm
  when: ansible_distribution == "Fedora"


    
# Configuring a cgroup driver





# start kubernetes cluster
- name: start kubelet service
  systemd: 
    name: kubelet.service
    state: started
    enabled: yes
    
- name: init kubeadm
  become: yes
  command: kubeadm init






    
